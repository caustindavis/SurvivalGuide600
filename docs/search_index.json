[["visualization-with-ggplot.html", "Chapter 9 Visualization with ggplot()", " Chapter 9 Visualization with ggplot() Note that you will need the dcps data (\"DCPS testing.RData\") and the tidyverse package to replicate the commands. See Section 4.1 for a reminder on how to import the data and Section 2.4 for installing and loading packages. Data visualization is a notable strength of R, and the ggplot() offers a consistent approach to generate a tremendous variety of visualizations. There are 3 primary elements: data to be plotted “aesthetics” or connections between properties or values of the data and features of the graph the “geometry” or plot type The basic recipe begins by calling the ggplot() function, specifying the data to be plotted, connecting data to features of the graph (“aesthetics”), and selecting a plot type. As with the tidyverse syntax, using ggplot() often involves connecting a series of instructions. Rather than the pipe operator, ggplot() simply uses the plus sign (+). The customization options are endless; the plot type, title, axis labels, scaling, colors, symbols, shapes, and much, much more. Here we will work through a few introductory examples, but, if you’d like to learn more, you may refer to R Studio’s Visualization Cheatsheet or the text written by ggplot()’s creator. "],["describe-one-variable.html", "9.1 Describe one variable", " 9.1 Describe one variable Let’s start with a relatively simple example: producing a histogram of a continuous variable (here, NumTested from our dcps dataset). We do so with three basic steps. First, we use a ggplot() command that specifies the data using the argument data and aesthetics using the aes() command. In the example below, the argument data is set equal to the object dcps which contains the data we would like to plot. The aes() argument x defines the variable from the data that should appear on the horizontal axis. The last element is to specify the plot type. To do that, we follow the ggplot() command with plus sign (+) and add the geom_histogram() command. # Histogram (continuous X) ggplot(data=dcps,aes(x=NumTested)) + geom_histogram() By default, geom_histogram() expects the variable to be continuous and automatically breaks it into 30 equal-width bins. You can override the default binning procedure by specifying bin widths or a number of bins; more details are available in the help file for geom_histogram(). If the variable is categorical rather than continuous, you will need to include an additional argument: geom_histogram(stat=\"count\"). Here’s an example using the categorical variable SchType. # Histogram (categorical X) ggplot(data=dcps,aes(x=SchType)) + geom_histogram(stat=&quot;count&quot;) With simple modifications to the aesthetics and the plot type, we can produce a box plot of another continuous variable ProfMath. # Box plot ggplot(data=dcps,aes(x=ProfMath)) + geom_boxplot() "],["visualizing-relationships.html", "9.2 Visualizing relationships", " 9.2 Visualizing relationships Considering relationships between variables with ggplot() generally involves adding aesthetics. We might be interested in comparing the same histogram or box plot for different groupings within the data. We can do that easily by specifying the grouping variable as the aesthetic fill. For example: # Box plot by categorical variable ggplot(data=dcps,aes(x=ProfMath,fill=SchType)) + geom_boxplot() To produce a scatter plot, we need to specify the aesthetic y, i.e. name the variable that will appear on the vertical axis, and set the plot type to geom_point(). # Scatter plot ggplot(data=dcps,aes(x=ProfMath,y=ProfLang)) + geom_point() We could also visually distinguish different school types in our scatter plot. However, for certain plot types like geom_point() and geom_line(), we use the aesthetic colour rather than fill as above. # Scatter plot by categorical variable ggplot(data=dcps,aes(x=ProfMath,y=ProfLang,colour=SchType)) + geom_point() Different plot types can be easily superimposed by adding additional commands. One common example would be adding a univariate linear regression (“best fit” line) to a scatter plot. That requires the plot type geom_smooth() which takes two arguments. First, you must specify the “smoothing method”, i.e. the mathematical approach to summarizing the relationship between your X and Y variables. For a “best fit” line, use the argument method='lm'. Then, R expects a mathematical equation relating X and Y. To get a “best fit” line, use the argument formula = y ~ x. Unless you fully understand the standard error calculations of the underlying stat_smooth() function, it’s best to suppress the plotting of standard errors by including se=F. # Scatter plot with &quot;best fit&quot; line ggplot(data=dcps,aes(x=ProfMath,y=ProfLang)) + geom_point() + geom_smooth(method=&#39;lm&#39;,formula=y~x,se=F) "],["professional-formatting.html", "9.3 Professional formatting", " 9.3 Professional formatting Formatting is what differentiates an exploratory graph from one you would present to others. The customizations available via ggplot() are extensive. From color choices to marker shapes to line widths, you have options. Here, we will focus on a few key elements: descriptive text (e.g. titles), axis scales, and legends. 9.3.1 Titles and labels Within the different plotting functions, you can specify the main title (ggtitle()), axis labels (e.g. xlab()), and more. As with other ggplot() elements, you add these with the plus sign (+). Choose simple, descriptive labels and titles. # Scatter plot with title and axis labels ggplot(data=dcps,aes(x=ProfMath,y=ProfLang)) + geom_point() + ggtitle(&quot;Math and Language Proficiency in DC Public Schools (2018)&quot;) + xlab(&quot;Grade-level proficient in Math (% tested)&quot;) + ylab(&quot;Grade-level proficient in Language (% tested)&quot;) 9.3.2 Axis options Sometimes the axis scales that R chooses don’t make sense or fail to communicate effectively. In these cases, we want to format the endpoints, or limits, of each axis scale. The command scale_x_continuous() and scale_y_continuous() allow you to customize labeling and limits for each axis. As you might guess, these commands are intended for continuous variables. Parallel commands exist for other types, including scale_x_discrete(), scale_x_date(), and scale_x_binned(). Others support transformations of variables for display, like scale_x_log10(). Refer to the ggplot() documentation for more details. In the example below, the arguments limits is used to set the minimum and maximum values displayed on each axis. Note that the limits need to be specified as a vector, e.g. by using the concatenate function c(). The argument breaks indicates which values are labeled on each axis. This argument also takes a vector. Here, we used the function seq() to create a vector of all values from 0 to 100 in increments of 10. # Scatter plot with title and axis labels ggplot(data=dcps,aes(x=ProfMath,y=ProfLang)) + geom_point() + ggtitle(&quot;Math and Language Proficiency in DC Public Schools (2018)&quot;) + xlab(&quot;Grade-level proficient in Math (% tested)&quot;) + ylab(&quot;Grade-level proficient in Language (% tested)&quot;) + scale_x_continuous(limits = c(0,100),breaks=seq(0,100,10)) + scale_y_continuous(limits = c(0,100),breaks=seq(0,100,10)) 9.3.3 Legend options When using the colour or fill aesthetics, ggplot() will automatically create a legend. You can manipulate the display of that legend using the commands scale_color_discrete() or scale_fill_discrete(). As you can see below, you can change the legend title with the argument name and the labels with the argument labels. Note that the labels argument also takes a vector, here produced with the concatenate function c(). # Scatter plot with title and axis labels ggplot(data=dcps,aes(x=ProfMath,y=ProfLang,colour=SchType)) + geom_point() + ggtitle(&quot;Math and Language Proficiency in DC Public Schools (2018)&quot;) + xlab(&quot;Grade-level proficient in Math (% tested)&quot;) + ylab(&quot;Grade-level proficient in Language (% tested)&quot;) + scale_x_continuous(limits = c(0,100),breaks=seq(0,100,10)) + scale_y_continuous(limits = c(0,100),breaks=seq(0,100,10)) + scale_color_discrete(name=NULL, labels=c(&quot;Grades 1-6&quot;,&quot;Grades 7-8&quot;,&quot;Grades 9-12&quot;)) "],["exportingsaving-graphs.html", "9.4 Exporting/saving graphs", " 9.4 Exporting/saving graphs Once you have a formatted graph, it’s time to export it. Find the Export button in the plot window and choose “Save as Image” (left-hand panel of the figure below). This opens the window shown in the right-hand panel. Here you want to select an appropriate format (typically .jpeg), name, and size. Size is crucial, and the target is the smallest possible without cutting out text. A size of 450x400 pixels is a pretty safe bet for most of what we do in this course. FIGURE 9.1: Fortmat and export graphs "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
